{"version":3,"file":"static/js/865.64f1caa7.chunk.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","searchWorkerManager.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"4e6f01b0\" + \".chunk.js\";\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/poke-corpus/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t865: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","import corpus from './i18n/corpus.json'\r\nimport { SearchParams, SearchTask, SearchTaskResult, cacheVersion } from './searchWorker';\r\n\r\nexport type SearchResults = {\r\n  complete: boolean,\r\n  status: string,\r\n  progress: number,\r\n  resultsLanguages: string[][],\r\n  results: [string, string, string[][]][]\r\n};\r\n\r\n/* eslint-disable no-restricted-globals */\r\nself.onmessage = (message: MessageEvent<SearchParams>) => {\r\n  const progressPortionLoading = 0.49;\r\n  const progressPortionProcessing = 0.49;\r\n  const progressPortionCollecting = 0.01; // 0.01 for rendering\r\n\r\n  const updateStatusInProgress = (status: string, loadingProgress: number, processingProgress: number, collectingProgress: number) => {\r\n    const progress = loadingProgress * progressPortionLoading + processingProgress * progressPortionProcessing + collectingProgress * progressPortionCollecting;\r\n    const message: SearchResults = {\r\n      complete: false,\r\n      status: status,\r\n      progress: progress,\r\n      resultsLanguages: [],\r\n      results: []\r\n    };\r\n    postMessage(message);\r\n  };\r\n\r\n  const updateStatusComplete = (status: string, resultsLanguages: string[][] = [], results: [string, string, string[][]][] = []) => {\r\n    const message: SearchResults = {\r\n      complete: true,\r\n      status: status,\r\n      progress: 1.0,\r\n      resultsLanguages: resultsLanguages,\r\n      results: results\r\n    };\r\n    postMessage(message);\r\n  };\r\n\r\n  try {\r\n    const params = message.data;\r\n    updateStatusInProgress('loading', 0, 0, 0);\r\n\r\n    // Load files\r\n    let taskCount = 0;\r\n    const taskList: SearchTask[] = [];\r\n    Object.keys(corpus.collections).filter((collectionKey) => params.collections.includes(collectionKey)).forEach((collectionKey) => {\r\n      const collection = corpus.collections[collectionKey as keyof typeof corpus.collections];\r\n\r\n      // Do not process collection if it does not include any language being searched\r\n      if (params.languages.every((languageKey) => !collection.languages.includes(languageKey))) {\r\n        return;\r\n      }\r\n\r\n      // Load all files in all languages in the collection\r\n      collection.files\r\n      .filter((fileKey) => !((fileKey === 'common' && !params.common) || (fileKey === 'script' && !params.script)))\r\n      .forEach((fileKey) => {\r\n        taskList.push({\r\n          index: taskCount,\r\n          params: params,\r\n          collectionKey: collectionKey,\r\n          fileKey: fileKey,\r\n          languages: collection.languages\r\n        })\r\n        taskCount += collection.languages.length;\r\n      });\r\n    });\r\n\r\n    // Initialize helpers\r\n    let loadedCount = 0;\r\n    let processedCount = 0;\r\n    let collectedCount = 0;\r\n    const taskResults: SearchTaskResult[] = [];\r\n    const helpers: Worker[] = [];\r\n    const helperOnMessage = (e: MessageEvent<SearchTaskResult>) => {\r\n      const result = e.data;\r\n      if (result.status === 'loading') {\r\n        loadedCount++;\r\n        updateStatusInProgress('loading', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(`Loaded ${loadedCount}/${taskCount}`);\r\n        }\r\n      }\r\n      else if (result.status === 'processing') {\r\n        processedCount++;\r\n        updateStatusInProgress('processing', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(`Processed ${processedCount}/${taskCount}`);\r\n        }\r\n      }\r\n      else if (result.status === 'done') {\r\n        taskResults.push(result);\r\n        collectedCount++;\r\n        updateStatusInProgress('collecting', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(`Collected ${collectedCount}/${taskList.length}`);\r\n        }\r\n\r\n        // Send results\r\n        if (collectedCount === taskList.length) {\r\n          const resultsLanguages: string[][] = [];\r\n          const results: [string, string, string[][]][] = [];\r\n          taskResults.sort((a, b) => a.index - b.index);\r\n          taskResults.forEach((taskResult) => {\r\n            if (taskResult.resultLanguages !== undefined && taskResult.result !== undefined) {\r\n              resultsLanguages.push(taskResult.resultLanguages);\r\n              results.push(taskResult.result);\r\n            }\r\n          });\r\n          updateStatusComplete('done', resultsLanguages, results);\r\n          helpers.forEach((helper) => helper.terminate());\r\n        }\r\n      }\r\n      else { // error\r\n        updateStatusComplete(result.status);\r\n        helpers.forEach((helper) => helper.terminate());\r\n      }\r\n    }\r\n\r\n    // Start helpers\r\n    const numWorkers = Math.min(taskList.length, (navigator.hardwareConcurrency - 2) || 4);\r\n    for (let i = 0; i < numWorkers; i++) {\r\n      const helper = new Worker(new URL(\"./searchWorker.ts\", import.meta.url));\r\n      helper.onmessage = helperOnMessage;\r\n      helpers.push(helper);\r\n    }\r\n    taskList.forEach((task, i) => {\r\n      helpers[i % helpers.length].postMessage(task);\r\n    });\r\n  }\r\n  catch (err) {\r\n    console.error(err);\r\n    updateStatusComplete('error');\r\n  }\r\n};\r\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","self","location","onmessage","message","updateStatusInProgress","status","loadingProgress","processingProgress","collectingProgress","postMessage","complete","progress","resultsLanguages","results","updateStatusComplete","arguments","length","undefined","params","data","taskCount","taskList","keys","corpus","filter","collectionKey","collections","includes","forEach","collection","languages","every","languageKey","files","fileKey","common","script","push","index","loadedCount","processedCount","collectedCount","taskResults","helpers","helperOnMessage","e","result","sort","a","taskResult","resultLanguages","helper","terminate","numWorkers","Math","min","navigator","hardwareConcurrency","i","Worker","URL","task","err","console","error"],"sourceRoot":""}