{"version":3,"file":"static/js/757.1ea831d6.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","searchWorker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import corpus from './i18n/corpus.json'\r\n\r\nexport type SearchParams = {\r\n  query: string,\r\n  regex: boolean,\r\n  caseInsensitive: boolean,\r\n  common: boolean,\r\n  script: boolean,\r\n  collections: string[],\r\n  languages: string[]\r\n};\r\n\r\nexport type SearchResults = {\r\n  complete: boolean,\r\n  status: string,\r\n  progress: number,\r\n  resultsLanguages: string[][],\r\n  results: [string, string, string[][]][]\r\n};\r\n\r\nfunction postProcess(s: string) {\r\n  return s.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\r\n    .replaceAll(/\\\\r\\\\n|\\\\c\\\\n|\\\\n/g, '<br>')\r\n    .replaceAll(/\\\\r|\\\\c|\\\\l|\\\\x25BD/g, '<br>')\r\n    .replaceAll(/\\{([^|}]+)\\|([^|}]+)\\}/g, '<ruby>$1<rp>(</rp><rt>$2</rt><rp>)</rp></ruby>')\r\n    .trimStart();\r\n}\r\n\r\nconst progressPortionLoading = 0.1;\r\nconst progressPortionProcessing = 0.8;\r\nconst progressPortionCollecting = 0.1;\r\n\r\n/* eslint-disable no-restricted-globals */\r\nself.onmessage = (message: MessageEvent<SearchParams>) => {\r\n  const params = message.data;\r\n  const re = params.regex ? new RegExp(params.query, params.caseInsensitive ? 'ui' : 'u') : null;\r\n\r\n  let corpusPromises: Promise<[[string, string], string[], Set<number>, string[][]]>[] = [];\r\n  let loadedCount = 0;\r\n  const loadedTotal = params.collections.length;\r\n  let processedCount = 0;\r\n  const processedTotal = Object.entries(corpus.collections)\r\n    .filter(([key, _]) => params.collections.includes(key))\r\n    .map(([_, val]) => val.languages.length * val.files.length)\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  params.collections.forEach((collectionKey) => {\r\n    const collection = corpus.collections[collectionKey as keyof typeof corpus.collections];\r\n    loadedCount++;\r\n    postMessage({\r\n      complete: false,\r\n      status: 'loading',\r\n      progress: loadedCount/loadedTotal * progressPortionLoading,\r\n      resultsLanguages: [],\r\n      results: []\r\n    });\r\n\r\n    if (params.languages.every((languageKey) => !collection.languages.includes(languageKey))) {\r\n      return;\r\n    }\r\n    collection.files.forEach((fileKey) => {\r\n      if (fileKey === 'common' && !params.common) {\r\n        return;\r\n      }\r\n      if (fileKey === 'script' && !params.script) {\r\n        return;\r\n      }\r\n\r\n      let collectionPromises: Promise<[[string, string[]], number[]]>[] = [];\r\n      collection.languages.forEach((languageKey) => {\r\n        // postMessage({\r\n        //   complete: false,\r\n        //   status: 'loading',\r\n        //   filename: `${collectionKey}_${languageKey}_${fileKey}`,\r\n        //   resultsLanguages: [],\r\n        //   results: []\r\n        // });\r\n\r\n        const url = process.env.PUBLIC_URL + `/corpus/${collectionKey}/${languageKey}_${fileKey}.txt`;\r\n        collectionPromises.push(\r\n          caches.open(\"v1\")\r\n          .then((cache) => cache.match(url)\r\n            .then(res => res ?? fetch(url).then((res) => cache.put(url, res).then(() => cache.match(url).then((res) => res ?? fetch(url))))))\r\n          .catch(() => fetch(url))\r\n          .then((res) => res.text())\r\n          .then((data) => {\r\n            const lines = data.split(/\\r\\n|\\n/);\r\n            let lineKeys: number[] = [];\r\n\r\n            processedCount++;\r\n            postMessage({\r\n              complete: false,\r\n              status: 'processing',\r\n              progress: progressPortionLoading + processedCount/processedTotal * progressPortionProcessing,\r\n              resultsLanguages: [],\r\n              results: []\r\n            });\r\n\r\n            if (params.languages.includes(languageKey)) {\r\n              lines.forEach((line, i) => {\r\n                if ((params.regex && re !== null && line.match(re))\r\n                    || (!params.regex && !params.caseInsensitive && line.includes(params.query))\r\n                    || (!params.regex && params.caseInsensitive && (line.toLowerCase().includes(params.query.toLowerCase()) || line.toUpperCase().includes(params.query.toUpperCase())))) {\r\n                  lineKeys.push(i);\r\n                }\r\n              });\r\n            }\r\n\r\n            return [[languageKey, lines], lineKeys];\r\n          }));\r\n      });\r\n      corpusPromises.push(Promise.all(collectionPromises).then((corpusResult) => {\r\n        let languageKeys: string[] = [];\r\n        let lineKeys: Set<number> = new Set();\r\n        let fileData: string[][] = [];\r\n\r\n        corpusResult.forEach(([[languageKeyResult, linesResult], lineKeysResult]) => {\r\n          languageKeys.push(languageKeyResult);\r\n          lineKeysResult.forEach((lineKey) => lineKeys.add(lineKey));\r\n          fileData.push(linesResult);\r\n        })\r\n\r\n        return [[collectionKey, fileKey], languageKeys, lineKeys, fileData];\r\n      }));\r\n    });\r\n  });\r\n\r\n  let resultsLanguages: string[][] = [];\r\n  let results: [string, string, string[][]][] = [];\r\n  let collectedCount = 0;\r\n  Promise.all(corpusPromises).then((corpusResults) => {\r\n    return corpusResults;\r\n  }).then((corpusResults) =>\r\n    corpusResults.forEach(([[collectionKey, fileKey], languageKeys, lineKeys, fileData]) => {\r\n      let fileResults: string[][] = [];\r\n\r\n      collectedCount++;\r\n      postMessage({\r\n        complete: false,\r\n        status: \"collecting\",\r\n        progress: (progressPortionLoading + progressPortionProcessing) + collectedCount/corpusResults.length * progressPortionCollecting,\r\n        resultsLanguages: [],\r\n        results: []\r\n      });\r\n\r\n      Array.from(lineKeys).sort().forEach((i) => {\r\n        const lineResults = fileData.map((lines) => postProcess(lines[i] ?? ''));\r\n        fileResults.push(lineResults);\r\n      });\r\n      resultsLanguages.push(languageKeys);\r\n      results.push([collectionKey, fileKey, fileResults]);\r\n    })\r\n  ).then(() =>\r\n    postMessage({\r\n      complete: true,\r\n      status: \"done\",\r\n      progress: 1.0,\r\n      resultsLanguages: resultsLanguages,\r\n      results: results\r\n    })\r\n  ).catch((err) => {\r\n    console.error(err);\r\n    postMessage({\r\n      complete: true,\r\n      status: \"error\",\r\n      progress: 1.0,\r\n      resultsLanguages: [],\r\n      results: []\r\n    });\r\n  });\r\n};\r\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","TypeError","self","onmessage","message","params","data","re","regex","RegExp","query","caseInsensitive","corpusPromises","loadedCount","loadedTotal","collections","processedCount","processedTotal","entries","corpus","filter","_ref","_ref2","key","includes","map","_ref3","_ref4","val","languages","files","reduce","a","b","forEach","collectionKey","collection","postMessage","complete","status","progress","resultsLanguages","results","every","languageKey","fileKey","common","script","collectionPromises","url","process","concat","caches","open","then","cache","match","res","fetch","put","catch","text","lines","split","lineKeys","line","toLowerCase","toUpperCase","Promise","all","corpusResult","languageKeys","Set","fileData","_ref5","_ref6","_ref6$","languageKeyResult","linesResult","lineKeysResult","lineKey","add","collectedCount","corpusResults","_ref7","_ref8","_ref8$","fileResults","progressPortionLoading","sort","lineResults","_lines$i","replaceAll","trimStart","console","error"],"sourceRoot":""}