{"version":3,"file":"static/js/336.0e4f9ebc.chunk.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","webWorker/corpus.ts","webWorker/searchWorkerManager.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"01dd87b1\" + \".chunk.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/poke-corpus/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t336: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","import corpusJson from '../res/corpus.json'\r\n\r\nexport interface Speaker {\r\n  readonly file: string,\r\n  readonly textFile: string\r\n}\r\n\r\nexport interface Collection {\r\n  readonly id?: string,                   // used for looking up a specific line by ID\r\n  readonly languages: readonly string[],  // available languages\r\n  readonly structured: boolean,           // true if lines are aligned between languages, false otherwise\r\n  readonly version?: string | {           // which version each language's files in the collection is from\r\n    [language: string]: string            // can be a string if the version number is the same between languages\r\n  },\r\n  readonly files: readonly string[],      // what files the collection contains\r\n  readonly speaker?: Speaker              // location of speaker names\r\n}\r\n\r\nexport interface Corpus {\r\n  hash: string,\r\n  readonly languages: readonly string[],\r\n  readonly collections: {\r\n    [collectionKey: string]: Collection\r\n  }\r\n}\r\n\r\nconst speakerDelimiters: {[language: string]: string} = {\r\n  'ja-Hrkt-JP': '『',\r\n  'ja-JP': '『',\r\n  'fr-FR': ' : ', // space before and after colon\r\n  'zh-CN': '\\uFF1A', // fullwidth colon\r\n  'zh-TW': '「'\r\n   // default: ': '\r\n};\r\n\r\nexport function speakerDelimiter(language: string) {\r\n  return speakerDelimiters[language] ?? ': ';\r\n}\r\n\r\nexport const corpus = corpusJson as Corpus;\r\nexport const cacheVersion = `corpus-${corpus.hash}`;\r\nexport default corpus;\r\n","import corpus from './corpus';\r\nimport { SearchParams, SearchTask, SearchTaskResult, SearchTaskResultComplete, SearchTaskResultError } from './searchWorker';\r\n\r\nexport type SearchResultsInProgress = 'loading' | 'processing' | 'collecting';\r\nexport type SearchResultsError = SearchTaskResultError | 'noMatch';\r\nexport type SearchResultsComplete = 'done' | SearchResultsError;\r\nexport type SearchResultsStatus = SearchResultsInProgress | SearchResultsComplete;\r\nexport interface SearchResultLines {\r\n  readonly collection: string,\r\n  readonly file: string,\r\n  readonly languages: readonly string[],\r\n  readonly lines: readonly string[][],\r\n  readonly displayHeader: boolean\r\n};\r\nexport interface SearchResults {\r\n  readonly complete: boolean,\r\n  readonly status: SearchResultsStatus,\r\n  readonly progress: number,\r\n  readonly results: readonly SearchResultLines[]\r\n};\r\n\r\n/* eslint-disable no-restricted-globals */\r\nself.onmessage = (message: MessageEvent<SearchParams>) => {\r\n  const progressPortionLoading = 0.49;\r\n  const progressPortionProcessing = 0.49;\r\n  const progressPortionCollecting = 0.01; // 0.01 for rendering\r\n\r\n  const updateStatusInProgress = (status: SearchResultsInProgress, loadingProgress: number, processingProgress: number, collectingProgress: number) => {\r\n    const progress = loadingProgress * progressPortionLoading + processingProgress * progressPortionProcessing + collectingProgress * progressPortionCollecting;\r\n    const message: SearchResults = {\r\n      complete: false,\r\n      status: status,\r\n      progress: progress,\r\n      results: []\r\n    };\r\n    postMessage(message);\r\n  };\r\n\r\n  const updateStatusComplete = (status: SearchResultsComplete, results: SearchResultLines[] = []) => {\r\n    const message: SearchResults = {\r\n      complete: true,\r\n      status: status,\r\n      progress: 1.0,\r\n      results: results\r\n    };\r\n    postMessage(message);\r\n  };\r\n\r\n  try {\r\n    const params = message.data;\r\n    updateStatusInProgress('loading', 0, 0, 0);\r\n\r\n    try {\r\n      if (params.regex) {\r\n        new RegExp(params.query, params.caseInsensitive ? 'ui' : 'u');\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n      updateStatusComplete('regex');\r\n      return;\r\n    }\r\n\r\n    // Load files\r\n    let taskCount = 0;\r\n    const taskList: SearchTask[] = [];\r\n    Object.keys(corpus.collections).filter((collectionKey) => params.collections.includes(collectionKey)).forEach((collectionKey) => {\r\n      const collection = corpus.collections[collectionKey];\r\n\r\n      // Do not process collection if it does not include any language being searched\r\n      if (params.languages.every((languageKey) => !collection.languages.includes(languageKey))) {\r\n        return;\r\n      }\r\n\r\n      // Load all files in all languages in the collection\r\n      collection.files\r\n      .filter((fileKey) => !((fileKey === 'common' && !params.common) || (fileKey === 'script' && !params.script)))\r\n      .forEach((fileKey) => {\r\n        const languages = collection.structured ? collection.languages : collection.languages.filter((languageKey) => params.languages.includes(languageKey));\r\n        if (!collection.structured) {\r\n          languages.forEach((languageKey, languageIndex) => {\r\n            taskList.push({\r\n              index: taskCount + languageIndex,\r\n              params: params,\r\n              collectionKey: collectionKey,\r\n              fileKey: fileKey,\r\n              languages: [languageKey]\r\n            });\r\n          });\r\n        }\r\n        else {\r\n          taskList.push({\r\n            index: taskCount,\r\n            params: params,\r\n            collectionKey: collectionKey,\r\n            fileKey: fileKey,\r\n            languages: languages,\r\n            speaker: collection?.speaker\r\n          });\r\n        }\r\n        taskCount += languages.length;\r\n      });\r\n    });\r\n    if (taskList.length === 0) {\r\n      updateStatusComplete('noMatch');\r\n      return;\r\n    }\r\n\r\n    // Initialize helpers\r\n    let loadedCount = 0;\r\n    let processedCount = 0;\r\n    let collectedCount = 0;\r\n    const taskResults: SearchTaskResultComplete[] = [];\r\n    const helpers: Worker[] = [];\r\n    const helperOnMessage = (e: MessageEvent<SearchTaskResult>) => {\r\n      const result = e.data;\r\n      if (result.status === 'loading') {\r\n        loadedCount++;\r\n        updateStatusInProgress('loading', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.debug(`Loaded ${loadedCount}/${taskCount}`);\r\n        }\r\n      }\r\n      else if (result.status === 'processing') {\r\n        processedCount++;\r\n        updateStatusInProgress('processing', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.debug(`Processed ${processedCount}/${taskCount}`);\r\n        }\r\n      }\r\n      else if (result.status === 'done') {\r\n        taskResults.push(result as SearchTaskResultComplete);\r\n        collectedCount++;\r\n        updateStatusInProgress('collecting', loadedCount/taskCount, processedCount/taskCount, collectedCount/taskList.length);\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.debug(`Collected ${collectedCount}/${taskList.length}`);\r\n        }\r\n\r\n        // Send results\r\n        if (collectedCount === taskList.length) {\r\n          const results: SearchResultLines[] = [];\r\n          taskResults.sort((a, b) => a.index - b.index);\r\n          let lastCollection = '';\r\n          let lastFile = '';\r\n          taskResults.map((taskResults) => taskResults.result).filter(({lines}) => lines.length > 0).forEach((result) => {\r\n            results.push({...result, displayHeader: result.collection !== lastCollection || result.file !== lastFile});\r\n            lastCollection = result.collection;\r\n            lastFile = result.file;\r\n          });\r\n\r\n          updateStatusComplete('done', results);\r\n          helpers.forEach((helper) => helper.terminate());\r\n        }\r\n      }\r\n      else { // error\r\n        updateStatusComplete(result.status);\r\n        helpers.forEach((helper) => helper.terminate());\r\n      }\r\n    }\r\n\r\n    // Start helpers\r\n    const numWorkers = Math.max(1, Math.min(taskList.length, (navigator.hardwareConcurrency || 4) - 2));\r\n    for (let i = 0; i < numWorkers; i++) {\r\n      const helper = new Worker(new URL(\"./searchWorker.ts\", import.meta.url));\r\n      helper.onmessage = helperOnMessage;\r\n      helpers.push(helper);\r\n    }\r\n    taskList.forEach((task, i) => {\r\n      helpers[i % helpers.length].postMessage(task);\r\n    });\r\n  }\r\n  catch (err) {\r\n    console.error(err);\r\n    updateStatusComplete('error');\r\n  }\r\n};\r\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","self","location","corpus","concat","hash","onmessage","message","updateStatusInProgress","status","loadingProgress","processingProgress","collectingProgress","postMessage","complete","progress","results","updateStatusComplete","arguments","length","undefined","params","data","regex","RegExp","query","caseInsensitive","err","console","error","taskCount","taskList","keys","collections","filter","collectionKey","includes","forEach","collection","languages","every","languageKey","files","fileKey","common","script","structured","push","index","speaker","languageIndex","loadedCount","processedCount","collectedCount","taskResults","helpers","helperOnMessage","e","result","sort","a","lastCollection","lastFile","map","_ref","lines","displayHeader","file","helper","terminate","numWorkers","Math","max","min","navigator","hardwareConcurrency","i","Worker","URL","task"],"sourceRoot":""}