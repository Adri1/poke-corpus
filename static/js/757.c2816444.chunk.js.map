{"version":3,"file":"static/js/757.c2816444.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","searchWorker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import corpus from './i18n/corpus.json'\r\n\r\nexport type SearchParams = {\r\n  query: string,\r\n  regex: boolean,\r\n  caseInsensitive: boolean,\r\n  common: boolean,\r\n  script: boolean,\r\n  collections: string[],\r\n  languages: string[]\r\n};\r\n\r\nexport type SearchResults = {\r\n  complete: boolean,\r\n  status: string,\r\n  progress: number,\r\n  resultsLanguages: string[][],\r\n  results: [string, string, string[][]][]\r\n};\r\n\r\nconst cacheVersion = \"v1\";\r\n\r\n/**\r\n * Attempts the following, in order:\r\n * - Retrieving the file from the cache\r\n * - Populating the cache with the file\r\n * - Fetching the file directly\r\n *\r\n * Returns a promise of the text of the file.\r\n */\r\nfunction getFileFromCache(collectionKey: string, languageKey: string, fileKey: string) {\r\n  const url = process.env.PUBLIC_URL + `/corpus/${collectionKey}/${languageKey}_${fileKey}.txt`;\r\n  return caches.open(cacheVersion)\r\n  .then((cache) => cache.match(url).then(res => res\r\n    ?? cache.add(url).then(() => cache.match(url)).then(res => res\r\n      ?? fetch(url))))\r\n  .catch(() => fetch(url))\r\n  .then((res) => res.text());\r\n}\r\n\r\n/**\r\n * Converts the provided string to HTML by escaping `<` and `>`,\r\n * replacing line break control characters such as  `\\n` with `<br>`,\r\n * and converting the ruby syntax `{base|ruby}` to the corresponding HTML tags.\r\n *\r\n * Returns the resulting HTML string.\r\n */\r\nfunction convertStringToHTML(s: string) {\r\n  return s.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\r\n    .replaceAll(/\\\\r\\\\n|\\\\c\\\\n|\\\\n/g, '<br>')\r\n    .replaceAll(/\\\\r|\\\\c|\\\\l|\\\\x25BD/g, '<br>')\r\n    .replaceAll('\\u2469', 'ᵉʳ') // Gen 5 superscript er\r\n    .replaceAll('\\u246A', 'ʳᵉ') // Gen 5 superscript re\r\n    .replaceAll('\\u246B', 'ʳ') // Gen 5 superscript r\r\n    .replaceAll('\\u2485', 'ᵉ') // Gen 5 superscript e\r\n    .replaceAll('\\u2486', '<sup>P</sup><sub>K</sub>') // Gen 5 PK\r\n    .replaceAll('\\u2487', '<sup>M</sup><sub>N</sub>') // Gen 5 MN\r\n    .replaceAll('\\uE07F', '\\u202F') // 3DS narrow no-break space (French)\r\n    .replaceAll('\\uE08A', 'ᵉʳ') // 3DS superscript er\r\n    .replaceAll('\\uE08B', 'ʳᵉ') // 3DS superscript re\r\n    .replaceAll('\\uE08C', 'ʳ') // 3DS superscript r\r\n    .replaceAll('\\uE0A6', 'ᵉ') // 3DS superscript e\r\n    .replaceAll('\\uE0A7', '<sup>P</sup><sub>K</sub>') // 3DS PK\r\n    .replaceAll('\\uE0A8', '<sup>M</sup><sub>N</sub>') // 3DS MN\r\n    .replaceAll(/\\{([^|}]+)\\|([^|}]+)\\}/g, '<ruby>$1<rp>(</rp><rt>$2</rt><rp>)</rp></ruby>') // Switch furigana\r\n    .trimStart();\r\n}\r\n\r\nconst progressPortionLoading = 0.49;\r\nconst progressPortionProcessing = 0.49;\r\nconst progressPortionCollecting = 0.01; // 0.01 for rendering\r\n\r\nfunction updateStatusInProgress(status: string, loadingProgress: number, processingProgress: number, collectingProgress: number) {\r\n  const progress = loadingProgress * progressPortionLoading + processingProgress * progressPortionProcessing + collectingProgress * progressPortionCollecting;\r\n  const message: SearchResults = {\r\n    complete: false,\r\n    status: status,\r\n    progress: progress,\r\n    resultsLanguages: [],\r\n    results: []\r\n  };\r\n  postMessage(message);\r\n}\r\n\r\nfunction updateStatusComplete(status: string, resultsLanguages: string[][] = [], results: [string, string, string[][]][] = []) {\r\n  const message: SearchResults = {\r\n    complete: true,\r\n    status: status,\r\n    progress: 1.0,\r\n    resultsLanguages: resultsLanguages,\r\n    results: results\r\n  };\r\n  postMessage(message);\r\n}\r\n\r\n/* eslint-disable no-restricted-globals */\r\nself.onmessage = (message: MessageEvent<SearchParams>) => {\r\n  const params = message.data;\r\n  updateStatusInProgress('loading', 0, 0, 0);\r\n\r\n  // Clear old caches\r\n  caches.keys().then((keyList) => Promise.all(keyList.filter((key) => key !== cacheVersion).map((key) => caches.delete(key))));\r\n\r\n\r\n  // Load files\r\n  const loadingPromises: [string, string, Promise<[string, string]>[]][] = [];\r\n  const loadingPromisesIndividual: Promise<[string, string]>[] = []; // for progress bar\r\n  params.collections.forEach((collectionKey) => {\r\n    const collection = corpus.collections[collectionKey as keyof typeof corpus.collections];\r\n\r\n    // Do not process collection if it does not include any language being searched\r\n    if (params.languages.every((languageKey) => !collection.languages.includes(languageKey))) {\r\n      return;\r\n    }\r\n\r\n    // Load all files in all languages in the collection\r\n    collection.files\r\n    .filter((fileKey) => !((fileKey === 'common' && !params.common) || (fileKey === 'script' && !params.script)))\r\n    .forEach((fileKey) => {\r\n      const loadingFilePromises = collection.languages.map((languageKey) => getFileFromCache(collectionKey, languageKey, fileKey).then((data) => [languageKey, data] as [string, string]));\r\n      loadingFilePromises.forEach((promise) => loadingPromisesIndividual.push(promise)); // for progress bar\r\n      loadingPromises.push([collectionKey, fileKey, loadingFilePromises] as [string, string, Promise<[string, string]>[]]);\r\n    });\r\n  });\r\n\r\n\r\n  // Process files\r\n  const re = params.regex ? new RegExp(params.query, params.caseInsensitive ? 'ui' : 'u') : null;\r\n  function matchCondition(line: string): boolean {\r\n    return (params.regex && re !== null && line.match(re) !== null)\r\n      || (!params.regex && !params.caseInsensitive && line.includes(params.query))\r\n      || (!params.regex && params.caseInsensitive && (line.toLowerCase().includes(params.query.toLowerCase()) || line.toUpperCase().includes(params.query.toUpperCase())));\r\n  }\r\n\r\n  const processingPromisesIndividual: Promise<[string, number[], string[]]>[] = []; // for progress bar\r\n  const processingPromises: Promise<[string, string, string[], string[][]]>[] = loadingPromises.map(([collectionKey, fileKey, filePromises]) => {\r\n    // Check selected languages for lines that satisfy the query\r\n    const processingFilePromises = filePromises.map((promise) => promise.then(([languageKey, data]) => {\r\n      const lines = data.split(/\\r\\n|\\n/);\r\n      const lineKeys: number[] = [];\r\n      if (params.languages.includes(languageKey)) {\r\n        lines.forEach((line, i) => {\r\n          if (matchCondition(line)) {\r\n            lineKeys.push(i);\r\n          }\r\n        });\r\n      }\r\n      return [languageKey, lineKeys, lines] as [string, number[], string[]];\r\n    }));\r\n    processingFilePromises.forEach((promise) => processingPromisesIndividual.push(promise)); // for progress bar\r\n\r\n    // Filter only the lines that matched\r\n    return Promise.all(processingFilePromises).then((processedFiles) => {\r\n      const languageKeys: string[] = [];\r\n      const lineKeysSet: Set<number> = new Set();\r\n      const fileData: string[][] = [];\r\n\r\n      processedFiles.forEach(([languageKey, lineKeys, lines]) => {\r\n        languageKeys.push(languageKey);\r\n        lineKeys.forEach((i) => lineKeysSet.add(i));\r\n        fileData.push(lines);\r\n      });\r\n\r\n      const fileResults: string[][] = [];\r\n      Array.from(lineKeysSet).sort((a, b) => a - b).forEach((i) => fileResults.push(fileData.map((lines) => convertStringToHTML(lines[i] ?? ''))));\r\n      return [collectionKey, fileKey, languageKeys, fileResults];\r\n    });\r\n  });\r\n\r\n\r\n  // Update progress bar as each file is loaded/processed\r\n  let loadedCount = 0;\r\n  let processedCount = 0;\r\n  let collectedCount = 0;\r\n\r\n  loadingPromisesIndividual.forEach((promise) => {\r\n    promise.then(() => {\r\n      loadedCount++;\r\n      updateStatusInProgress('loading', loadedCount/loadingPromisesIndividual.length, processedCount/processingPromisesIndividual.length, collectedCount/processingPromises.length);\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(`Loaded ${loadedCount}/${loadingPromisesIndividual.length}`);\r\n      }\r\n    });\r\n  })\r\n\r\n  processingPromisesIndividual.forEach((promise) => {\r\n    promise.then(() => {\r\n      processedCount++;\r\n      updateStatusInProgress('processing', loadedCount/loadingPromisesIndividual.length, processedCount/processingPromisesIndividual.length, collectedCount/processingPromises.length);\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(`Processed ${processedCount}/${processingPromisesIndividual.length}`);\r\n      }\r\n    });\r\n  })\r\n\r\n\r\n  // Collect results\r\n  Promise.all(processingPromises).then((processingResults) => {\r\n    const resultsLanguages: string[][] = [];\r\n    const results: [string, string, string[][]][] = [];\r\n    processingResults.forEach(([collectionKey, fileKey, languageKeys, fileResults], collectedCount) => {\r\n      resultsLanguages.push(languageKeys);\r\n      results.push([collectionKey, fileKey, fileResults]);\r\n      collectedCount++;\r\n      updateStatusInProgress('collecting', loadedCount/loadingPromisesIndividual.length, processedCount/processingPromisesIndividual.length, collectedCount/processingPromises.length);\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(`Collected ${collectedCount}/${processingPromises.length}`);\r\n      }\r\n    });\r\n    updateStatusComplete('done', resultsLanguages, results);\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n    updateStatusComplete('error');\r\n  });\r\n};\r\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","TypeError","updateStatusInProgress","status","loadingProgress","processingProgress","collectingProgress","postMessage","complete","progress","resultsLanguages","results","updateStatusComplete","arguments","undefined","self","onmessage","message","params","data","caches","keys","then","keyList","Promise","all","filter","key","map","delete","loadingPromises","loadingPromisesIndividual","collections","forEach","collectionKey","collection","corpus","languages","every","languageKey","includes","files","fileKey","common","script","loadingFilePromises","url","process","concat","open","cache","match","res","add","fetch","catch","text","getFileFromCache","promise","re","regex","RegExp","query","caseInsensitive","processingPromisesIndividual","processingPromises","_ref","_ref2","processingFilePromises","_ref3","_ref4","lines","split","lineKeys","line","toLowerCase","toUpperCase","matchCondition","processedFiles","languageKeys","lineKeysSet","Set","fileData","_ref5","_ref6","fileResults","sort","a","b","_lines$i","replaceAll","trimStart","loadedCount","processedCount","processingResults","_ref7","collectedCount","_ref8","console","error"],"sourceRoot":""}